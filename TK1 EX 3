Task 1.1: Threading 
Explain in a few sentences the introduced concepts of a Monitor. 
The Monitor is nothing but it is a synchronization construct in a concurrent programming. The major function is, it allows the thread to do Mutual Exclusion and it has the ability to wait until some conditions become satisfied. It also informs other threads whether there conditions are met. A Monitor has basically four components Private Data, Monitor Procedure, Initialization, Entry Queue. The Initialization component consist of code that need to be executed once the Monitor has been created. The private data components consists some data that can’t visible and access outside the Monitor. In the Monitor Procedure component it has some procedure to execute, it can be called from outside of the Monitor. The Entry Queue contains threads that called by Monitor Procedures.
Task 1.2: Transparency in Java RMI (4 P.) 
Describe for each type of transparency, if it is provided by RMI and give a short explanation why?
 Several types of transparencies are there in distributed systems some of them are
1.	Access Transparency
In this the client should not have the knowledge of the distribution of the file, it could be present in a different set of servers. It can be also said to be explicit communication may be hidden. In users view accessing a remote service is identical to accessing a local service (Eg: Printer). 

2.	Location Transparency
The client should be unaware of the topology of the distributed system and also they don’t have the knowledge about the location of an object in the system. This property is important for the movement, support of the resources and available services. Some time it is referred as Network transparency.

3.	Concurrency Transparency
The Application and Users should have the ability to access the shared data or objects without any interference between each other. This is very complex so instead of simulated concurrency here exist true concurrency. The implementation and concurrency control is very complex.

4.	Replication Transparency
In this it will replicate the data in two or more location for the reliability. The client is unaware about the existence of replicated data.

5.	Failure Transparency
Allows the Users and Application to complete the task without affecting the failure of hardware and software. If a software or hardware failure is occur it is hidden from the client so it is difficult to provide in a distributed system. Fault tolerance will be provided by the mechanism related to access transparency.


6.	Migration Transparency
The client should not have the knowledge of movement of the process or information in a system without affecting operations.

7.	Performance Transparency
It will provide the better performance and reliability. It will be hidden from the user.

8.	Scaling Transparency
The system will grow without affecting application algorithms also it should be able to scale down to small environments when required.

Task 1.3 :

1.	Single Thread

Time for one request = Compute the arg for client + Marshal args + Process time of OS send + network time transfer + OS receive + Unmarshal args + server process + Marshal server result + OS send + network transfer time + OS receive + Unmarshal args 

So Time for one request = 4+1+0.3+4+0.3+1+9+1+0.3+4+0.3+1 = 26.2 ms

Time for 2 requests = 26.2 * 2  = 52.4 ms 

2.	Multi-Thread

Client calc args + marshal args + Send time OS for 1st Call = (4+1+0.3) = 5.3 ms

For 2nd call = 5.3 
Time for both call = 10.6

So after 10.6 it waits for the server response, 
At server 1st call comes after 5.3 ,
5.3 + network time + OS receive + unmarshal  = 5.3 + 4 + 0.3 + 1 = 10.6 ms
At 10.6 + 9 + 1 + 0.3 = 20.9 ms , So at 20.9 ms first is send back

The 2nd req it is taken at 20.9 ms,
Taking 9+1+0.3 = 10.3ms, sends it back at 20.6 + 10.3 = 30.9 ms from start. 
Client Receives = 30.9 + 4 + 0.3 +1 = 36.2 ms 

So Time for 2 Calls = 36.2 ms. 








